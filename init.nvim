set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &packpath = &runtimepath

" Note: ]q and [q will jump around errors
syntax off
function! Keys()
    redir! => message
    silent verbose map
    silent verbose imap
    redir END
    if empty(message)
        echoerr "no output"
    else
        " use "new" instead of "tabnew" below if you prefer split windows instead of tabs
        new
        setlocal buftype=nofile bufhidden=wipe noswapfile nobuflisted nomodified
        silent put=message
    endif
endfunction

let mapleader = "\<Space>"

" Jump to last position when opening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

set wildcharm=<Tab>
nnoremap <leader><c-t> :b <Tab>
nnoremap <c-t> :b <Tab>
" General Config
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
set nocompatible
set wrap
set scrolloff=0
set foldenable
set synmaxcol=500
set nonumber " Also show current absolute line
set diffopt+=iwhite " No whitespace in vimdiff
" Make diffing better: https://vimways.org/2018/the-power-of-diff/
set hidden " allow me to have buffers with unsaved changes.
set autoread " when a file has changed on disk, just load it. Don't ask.
set textwidth=0 " this inserts annoying newlines
set shiftwidth=4
set softtabstop=4
set expandtab
set lazyredraw
set breakindent
set breakindentopt=shift:4,min:40,sbr
set showbreak=↳
set linebreak
set mouse=a
set noshowmode
set ignorecase
set smartcase 
set incsearch 
set showmatch 
set mat=2 " blink time
set nohlsearch
set gdefault
set splitright
set splitbelow
set wildmenu
set wildignore=*.o,*.obj,*.bak,*.exe
set wildmode=longest:full,full
" don't give |ins-completion-menu| messages.
set shortmess+=c
set shortmess+=I
set shortmess+=a


set noshowcmd
set backspace=indent,eol,start
set autoindent
set nostartofline
set laststatus=2
set confirm
set visualbell
set nocursorline
"set guicursor=
set cmdheight=1
set timeout ttimeout ttimeoutlen=1
set nolist
set listchars=nbsp:¬,extends:»,precedes:«,trail:•
filetype indent plugin on
nnoremap Q <Nop>
set directory=$HOME/.vim/swapfiles
set backupdir=$HOME/.vim/swapfiles
autocmd SwapExists * let v:swapchoice = "o"
" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile
" persistant undo
set undodir=~/.vim/undo
set undofile

" Emacs CMDline 
cnoremap <C-A> <Home>
cnoremap <C-F> <Right>
cnoremap <C-B> <Left>
cnoremap <C-D> <Delete>
cnoremap <c-k> <c-\>e getcmdpos() == 1 ? '' : getcmdline()[:getcmdpos()-2]<CR>
inoremap <C-A> <Home>
inoremap <C-B> <Left>
inoremap <C-E> <End>
inoremap <C-F> <Right>
inoremap <C-Backspace> <C-w>
noremap! <C-BS> <C-w>
noremap! <C-h> <C-w>
inoremap <c-c> <ESC>
nnoremap <silent> gf gFzz
nnoremap gx :execute 'silent! !xdg-open "<cfile>" &> /dev/null &' <bar> redraw! <CR>
" VSetSearch - Search for selected text, forwards or backwards. {{{2
function! s:VSetSearch(cmdtype) abort
    let temp = @s
    norm! gv"sy
    let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
    let @s = temp
endfunction
xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>
xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>
nnoremap ' `
nnoremap '' ``

nnoremap <leader>] :foldopen<CR>
nnoremap <leader>[ :foldclose<CR>
nnoremap <silent> <leader><leader>[ :setlocal foldlevel=0<CR>
nnoremap <silent> <leader><leader>] :setlocal foldlevel=10<CR>
nnoremap <Backspace> <c-^>
nnoremap <silent> <Leader>q :bd<CR>
nnoremap <silent> <Leader>Q :bp\|bd #<CR>
nnoremap <silent> <C-Q> <NOP>
nnoremap <silent> <C-Q><C-Q> :qall<CR>
inoremap <silent> <c-s> <c-o>:w<cr>
nnoremap <silent> <c-s> :w<cr>
nnoremap <silent> <Leader>w :w<CR>
nnoremap <silent> <Leader>W :w !sudo tee %<CR>

"sessions
nnoremap <leader><leader>w :let @1 = join(['~/.vim/sessions/', fnamemodify('.', ':p:h:t')], '')<cr>:mksession! <c-r>1
nnoremap <leader><leader>W :let @1 = join(['~/.vim/sessions/', fnamemodify('.', ':p:h:t')], '')<cr>:source <c-r>1

nnoremap <silent> <leader><tab> :buffers<CR>
nnoremap <silent> <s-tab> :bn<CR>
" Open new file adjacent to current file
nnoremap <leader>e :e <C-R>=expand("%:p:h") . "/" <CR>
nmap <Leader>cp :let @+ = join([expand('%'),  line(".")], ':')<cr>
nmap <Leader>cP :let @+ = join([expand('%:p'),  line(".")], ':')<cr>
nnoremap <leader>i :set invlist<cr>
nmap gl gx
map Y y$
map H ^
map L $
nnoremap <silent> j gj
nnoremap <silent> k gk
nnoremap <silent> gj j
nnoremap <silent> gk k
" z= to spell check word under cursor
nnoremap <Leader>zz :setlocal spell!<CR>
nnoremap <leader><leader><leader> :set hlsearch!<cr>
nnoremap <silent> <2-LeftMouse> :let @/='\V\<'.escape(expand('<cword>'), '\').'\>'<cr>:set hls<cr>
nnoremap <silent> <3-LeftMouse> :nohlsearch<cr>
map <silent> <C-LeftMouse> gd
map <silent> <C-RightMouse> <C-o>

nnoremap <silent> <leader><return> :let @/='\V\<'.escape(expand('<cword>'), '\').'\>'<cr>:set hls!<cr>


"Paste  Commands
inoremap <C-V> <c-o>:silent set paste<cr><C-R>+<c-o>:silent set nopaste<cr>
vnoremap <C-C> "+y
vnoremap <C-X> "+d
cnoremap <C-V> <C-R>+
nnoremap gP `[v`]

vnoremap < <gv
vnoremap > >gv
vnoremap R :s/<c-r>"/
nnoremap <leader>R :%s/<c-r>"/
vnoremap <silent> <leader>S y<esc>:<c-r>"<cr>

map <leader>xx :Dispatch!<space>
"map <leader>xc :compiler<space>
map <leader>xc :let b:dispatch = 
map <leader>xa :cope<cr>
map <leader>xl :Copen<cr>
map <leader>xp [q
map <leader>xn ]q
nnoremap <silent> <leader><c-l> :redraw!<cr>:highlight Cursor guifg=white guibg=black<cr>
nnoremap <silent> <c-l> :redraw!<cr>:highlight Cursor guifg=white guibg=black<cr>
function! RepWincmd(...)
    execute (v:count ? v:count : s:rep[1]) 'wincmd' s:rep[0]
endfunction

function! s:setup(rep, ...)
    let s:rep = [a:rep, v:count ? v:count : get(a:000, 0, 1)]
    set operatorfunc=RepWincmd
    return 'g@l'
endfunction

" optional number is the default shift amount
nnoremap <expr> <c-w>- <sid>setup('-', 3)
nnoremap <expr> <c-w>+ <sid>setup('+', 3)
nnoremap <expr> <c-w>< <sid>setup('<', 5)
nnoremap <expr> <c-w>> <sid>setup('>', 5)

"nnoremap <silent> <c-t> <NOP>
"nnoremap <silent> <c-t>n :tabnext<cr>
"nnoremap <silent> <c-t>p :tabprevious<cr>
"nnoremap <silent> <c-t>c :tabnew<cr>
"nnoremap <silent> <c-t>x :tabclose<cr>

nnoremap <leader>dh :diffget //2<CR>
nnoremap <leader>dl :diffget //3<CR>

let g:netrw_banner = 0
map <c-\> :Lex<CR>
map - :Explore %:h<CR>
"map <leader>\ :NERDTreeFind<CR>

" from http://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/
if executable('rg')
    set grepprg=rg\ --no-heading\ --vimgrep\ --smart-case
    set grepformat=%f:%l:%c:%m
elseif executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor
else
    set grepprg=grep\ -n\ -R
endif
set grepformat=%f:%l:%m,%m\ %f\ match%ts,%f
nnoremap <Leader>g :silent grep!<Space><Space>\| cope<left><left><left><left><left><left><left>
vnoremap <Leader>g ygv:<c-u>silent grep!<Space><C-R>"<Space><Space>\| copen<left><left><left><left><left><left><left>
nnoremap <Leader>G :silent grep!<Space><C-r>/<Space><C-r>%<Space><Space>\| cope<left><left><left><left><left><left><left>
nnoremap <Leader>a :silent grep!<Space><Space>\| cope<left><left><left><left><left><left><left>
vnoremap <Leader>a ygv:<c-u>silent grep!<Space><C-R>"<Space><Space>\| copen<left><left><left><left><left><left><left>
nnoremap <Leader>A :silent grep!<Space><C-r>/<Space><C-r>%<Space><Space>\| cope<left><left><left><left><left><left><left>
" When using `dd` in the quickfix list, remove the item from the quickfix list.
" cdo will apply to all lines in the quickfix window
function! RemoveQFItem()
    let curqfidx = line('.') - 1
    let qfall = getqflist()
    call remove(qfall, curqfidx)
    call setqflist(qfall, 'r')
    execute curqfidx + 1 . "cfirst"
    :copen
endfunction
:command! RemoveQFItem :call RemoveQFItem()
" Use map <buffer> to only map dd in the quickfix window. Requires +localmap
autocmd FileType qf map <buffer> dd :RemoveQFItem<cr>

nnoremap <silent> [q :cprevious<cr>zz
nnoremap <silent> ]q :cnext<cr>zz

nnoremap <Leader>cd :cd %:p:h<CR>:pwd<CR>
nnoremap <silent> <leader>o :call SwitchSourceHeader()<cr>
function! SwitchSourceHeader()
  if (expand ("%:e") == "cpp")
    silent! find %:t:r.h
    silent! find %:t:r.hpp
  elseif (expand ("%:e") == "c")
    silent! find %:t:r.h
  elseif (expand ("%:e") == "hpp")
    silent! find %:t:r.cpp
  elseif (expand ("%:e") == "h")
    silent! find %:t:r.cpp
    silent! find %:t:r.c
  endif
endfunction

if &term =~ '256color'
    " Disable Background Color Erase (BCE) so that color schemes
    "     " work properly when Vim is used inside tmux and GNU screen.
    set t_Co=256
    set t_ut=
endif

if has("nvim")
        tnoremap <s-space> <space>
        tnoremap <C-V> <C-\><C-n>"+pA
        try
            set diffopt+=indent-heuristic
            set diffopt+=filler
            set diffopt+=internal
            set diffopt+=algorithm:patience
            set wildoptions+=pum
        catch
        endtry
        set background=light " or light if you prefer the light version

        highlight Pmenu ctermbg=lightgray guibg=lightgray
        highlight Cursor guifg=white guibg=black
        highlight iCursor guifg=white guibg=black
        set guicursor=n-v-c:block-Cursor
        set guicursor+=i:ver100-iCursor
        set guicursor+=n-v-c:blinkon0
        set guicursor+=i:blinkwait10

else
    set showmode
endif

if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

function! BufMessage(cmd)
  redir => message
  silent execute a:cmd
  redir END
  if empty(message)
    echoerr "no output"
  else
    " use "new" instead of "tabnew" below if you prefer split windows instead of tabs
    new
    setlocal buftype=nofile bufhidden=wipe noswapfile nobuflisted nomodified
    silent put=message
  endif
endfunction
command! -nargs=+ -complete=command BufMessage call BufMessage(<q-args>)

autocmd FileType gitcommit set bufhidden=delete

set exrc
set secure
syntax on
highlight Pmenu ctermbg=lightgray guibg=lightgray
highlight Cursor guifg=white guibg=black
highlight iCursor guifg=white guibg=black
highlight clear SignColumn

if has("nvim")
    tnoremap <silent> <Esc> <C-\><C-n>
    tnoremap <silent> <C-w><C-w> <C-w>
    tnoremap <silent> <C-w><C-h> <C-\><C-n><C-w><C-h>
    tnoremap <silent> <C-w><C-j> <C-\><C-n><C-w><C-j>
    tnoremap <silent> <C-w><C-k> <C-\><C-n><C-w><C-k>
    tnoremap <silent> <C-w><C-l> <C-\><C-n><C-w><C-l>
    tnoremap <silent> <C-w>h <C-\><C-n><C-w><C-h>
    tnoremap <silent> <C-w>j <C-\><C-n><C-w><C-j>
    tnoremap <silent> <C-w>k <C-\><C-n><C-w><C-k>
    tnoremap <silent> <C-w>l <C-\><C-n><C-w><C-l>

    " Start terminal in new split
    nnoremap <M-`> :call ChooseTerm("term-slider", 1)<CR>
    inoremap <M-`> <c-o>:call ChooseTerm("term-slider", 1)<CR>
    tnoremap <M-`> <C-\><C-n>:call ChooseTerm("term-slider", 1)<CR>

    " Start terminal in current pane
    nnoremap <M-CR> :call ChooseTerm("term-pane", 0)<CR>
    inoremap <M-CR> <c-o>:call ChooseTerm("term-pane", 0)<CR>
    tnoremap <M-CR> <C-\><C-n> :call ChooseTerm("term-pane", 0)<CR>

    function! ChooseTerm(termname, slider)
        let pane = bufwinnr(a:termname)
        let buf = bufexists(a:termname)
        if pane > 0
            " pane is visible
            if a:slider > 0
                :exe pane . "wincmd c"
            else
                :exe "e #" 
                :startinsert
            endif
        elseif buf > 0
            " buffer is not in pane
            if a:slider
                :exe "botright split"
            endif
            :exe "buffer " . a:termname
            :startinsert
        else
            " buffer is not loaded, create
            if a:slider
                :exe "botright split"
            endif
            if has('win32')
                :terminal pwsh
            else
                :terminal
            endif
            :exe "f " a:termname
            :startinsert
        endif
    endfunction

    autocmd TermOpen * startinsert

    " set shell=pwsh.exe

    let $GIT_EDITOR = 'nvr -cc split --remote-wait'

    augroup MyTermMappings
        autocmd!
        autocmd TermOpen * nnoremap <buffer> <enter> A
        autocmd TermOpen * vnoremap <buffer> <enter> ypA
    augroup END

    " Plugins
    "curl -fLo $HOME/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
    try
        call plug#begin('~/.vim/plugged')
        Plug 'cormacrelf/vim-colors-github'
        Plug 'ervandew/supertab'
        Plug 'michaeljsmith/vim-indent-object'
        Plug 'raimondi/delimitMate'
        Plug 'airblade/vim-rooter'
        let g:rooter_patterns = ['Cargo.toml', 'Rakefile', '.git/', '.root']
        let g:rooter_manual_only = 0
        nnoremap <Leader>CD :Rooter<CR>:source .vimrc<CR>:pwd<CR>
        Plug 'tpope/vim-fugitive'
        nnoremap <leader>gg :G<CR>
        nnoremap <leader>gl :GlLog!<CR>
        nnoremap <leader>gd :Gvdiff<Space>
        nnoremap <leader>GD :Gdiffsplit!<CR>
        nnoremap <leader>gb :Git blame<CR>
        nnoremap <leader>ge :Gvsplit origin/master:%<Space>

        Plug 'airblade/vim-gitgutter'
        let g:gitgutter_map_keys = 0
        nmap ]g <Plug>(GitGutterNextHunk)
        nmap [g <Plug>(GitGutterPrevHunk)
        nnoremap <leader>gs :GitGutterStageHunk<CR>
        nnoremap <leader>gu :GitGutterUndoHunk<CR>
        " TOGGLE --------------------------------------------
        nnoremap <silent> gp :call ToggleGitGutterPreviewHunk()<CR>
        function! ToggleGitGutterPreviewHunk() abort
            " does nothing if that command doesn't exist
            if !exists(':GitGutterPreviewHunk')
                return 0
            endif

            " loop through all the windows in the current tab page
            for win in range(1, winnr('$'))

                " is it a preview window?
                let preview_window = getwinvar(win, '&previewwindow') ? win : 0
            endfor

            " we have a preview window
            if preview_window > 0

                " close the preview window
                pclose

                " we don't have a preview window
            else

                " open the preview window
                GitGutterPreviewHunk
            endif
        endfunction
        Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
        Plug 'junegunn/fzf.vim'

        nnoremap <C-p> :FZF<CR>
        nnoremap <Leader>b :Buffers<CR>
        nnoremap <leader><tab> :Buffers<CR>
        nnoremap <Leader>s :BLines<CR>
        nnoremap <Leader>S :Rg<space>
        nnoremap <Leader><Leader>s :Lines<CR>
        nnoremap <Leader>H :Helptags<CR>
        nnoremap <Leader>h :History<CR>
        nnoremap <leader>;  :<up>
        call plug#end()
        colorscheme github
    catch
    endtry
endif
